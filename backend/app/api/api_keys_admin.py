from fastapi import APIRouter, Depends, HTTPException, status
from typing import List
from sqlalchemy.orm import Session

from app.db.session import get_db
from app.schemas import api_key as api_key_schema
from app.crud import crud_api_key
# We need the model to query the database directly here
from app.models import user as user_model, api_key as api_key_model
from app.core.security import get_current_active_user

router = APIRouter()

def get_current_admin_user(current_user: user_model.User = Depends(get_current_active_user)):
    """Dependency to check if the current user is an admin."""
    if not current_user.role or current_user.role.name.lower() != 'admin':
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="The user does not have enough privileges"
        )
    return current_user

# --- [UNCHANGED] ---
@router.post(
    "/admin/api-keys",
    response_model=api_key_schema.APIKey,
    status_code=status.HTTP_201_CREATED,
    summary="Create a new API Key",
    tags=["Admin: API Keys"]
)
def create_new_api_key(
        *,
        db: Session = Depends(get_db),
        key_in: api_key_schema.APIKeyCreate,
        admin_user: user_model.User = Depends(get_current_admin_user)
):
    """Generate a new API key with an optional descriptive name."""
    api_key = crud_api_key.create_api_key(db=db, obj_in=key_in, created_by_id=admin_user.id)
    return api_key

# --- [UNCHANGED] ---
@router.get(
    "/admin/api-keys",
    response_model=List[api_key_schema.APIKey],
    summary="List API Keys created by the admin",
    tags=["Admin: API Keys"]
)
def list_my_api_keys(
        *,
        db: Session = Depends(get_db),
        admin_user: user_model.User = Depends(get_current_admin_user)
):
    """Retrieve all API keys generated by the currently logged-in admin."""
    return crud_api_key.get_api_keys_for_user(db=db, user_id=admin_user.id)


# --- [NEW] Endpoint to activate or deactivate a key ---
@router.patch(
    "/admin/api-keys/{key_id}/toggle-status",
    response_model=api_key_schema.APIKey,
    summary="Activate or Deactivate an API Key",
    tags=["Admin: API Keys"]
)
def toggle_key_status(
        *,
        key_id: str,
        db: Session = Depends(get_db),
        admin_user: user_model.User = Depends(get_current_admin_user)
):
    """Toggles the is_active status of a key."""
    db_key = db.query(api_key_model.APIKey).filter_by(id=key_id, created_by_id=admin_user.id).first()
    if not db_key:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="API Key not found")
    return crud_api_key.toggle_api_key_status(db=db, db_obj=db_key)

# --- [NEW] Endpoint to update a key's name ---
@router.put(
    "/admin/api-keys/{key_id}",
    response_model=api_key_schema.APIKey,
    summary="Update an API Key's Name",
    tags=["Admin: API Keys"]
)
def update_key_name(
        *,
        key_id: str,
        key_in: api_key_schema.APIKeyUpdate,
        db: Session = Depends(get_db),
        admin_user: user_model.User = Depends(get_current_admin_user)
):
    """Updates the descriptive name of an API key."""
    db_key = db.query(api_key_model.APIKey).filter_by(id=key_id, created_by_id=admin_user.id).first()
    if not db_key:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="API Key not found")
    return crud_api_key.update_api_key(db=db, db_obj=db_key, obj_in=key_in)


# --- [MODIFIED] This endpoint now permanently deletes the key ---
@router.delete(
    "/admin/api-keys/{key_id}",
    summary="Permanently Delete an API Key",
    status_code=status.HTTP_204_NO_CONTENT,
    tags=["Admin: API Keys"]
)
def permanently_delete_key(
        *,
        key_id: str,
        db: Session = Depends(get_db),
        admin_user: user_model.User = Depends(get_current_admin_user)
):
    """Permanently deletes an API key from the database. This action cannot be undone."""
    crud_api_key.delete_api_key(db=db, id=key_id, user_id=admin_user.id)
    return None